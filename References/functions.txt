#include "MKL25Z4.h"   // Device header

#define RED_LED 		18 	// PortB Pin 18
#define GREEN_LED 	19 	// PortB Pin 19
#define BLUE_LED 		1 	// PortD Pin 1
#define MASK(x) 		(1 << (x))

/* Initialize switches*/
void initSwitch(void) {
	// enable clock for PortD
	SIM->SCGC5 |= (SIM_SCGC5_PORTD_MASK);	
	
	/* Select GPIO and enable pull-up resistors and interrupts
	on falling edges of pin connected to switch */
	PORTD->PCR[SW_POS] |= (
			PORT_PCR_MUX(1) | 
			PORT_PCR_PS_MASK | 
			PORT_PCR_PS_MASK | 
			PORT_PCR_IRQC(0x0a)
	);
	
	// Set PORT D Switch bit to input
	PTD->PDDR &= ~MASK(SW_POS);
	
	// Enable Interrupts
	NVIC_SetPriority(PORTD_IRQn, 2);
	NVIC_ClearPendingIRQ(PORTD_IRQn);
	NVIC_EnableIRQ(PORTD_IRQn);
}

/* Initialize GPIO pins */
void InitGPIO(void) {
	// Enable Clock to PORTB and PORTD
	SIM->SCGC5 |= ((SIM_SCGC5_PORTB_MASK) | (SIM_SCGC5_PORTD_MASK));

	// Configure MUX settings to make all 3 pins GPIO
	PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1);
	PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1);
	PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK;
	PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1);

	// Set Data Direction Registers for PortB and PortD
	PTB->PDDR |= (MASK(RED_LED) | MASK(GREEN_LED));
	PTD->PDDR |= MASK(BLUE_LED);
}

/* Delay Routine */
static void delay(volatile uint32_t nof) {
  while(nof!=0) {
    __asm("NOP");
    nof--;
  }
}

/* Turn on the Red LED*/
void flashRed(void) {
	PTD->PDOR |= MASK(BLUE_LED);
	PTB->PDOR |= MASK(GREEN_LED);
	PTB->PDOR &= ~MASK(RED_LED);
}

/* Turn on the Green LED*/
void flashGreen(void) {
	PTB->PDOR |= MASK(RED_LED);
	PTD->PDOR |= MASK(BLUE_LED);
	PTB->PDOR &= ~MASK(GREEN_LED);
}

/* Turn on the Blue LED*/
void flashBlue (void) {
	PTB->PDOR |= (MASK(GREEN_LED) | MASK(RED_LED));
	PTD->PDOR &= ~MASK(BLUE_LED);
}

/* Turn off all the LEDs */
void offLED(void) {
	PTB->PDOR |= (MASK(GREEN_LED) | MASK(RED_LED));
	PTD->PDOR |= MASK(BLUE_LED);
}

/* Initialize the PWM module */
void initPWM(void) {
	// Enable Clock Gating for PORTB
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
	
	// Configure Mode 3 for the PWM pin operation
	PORTB->PCR[PTB0_Pin] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[PTB0_Pin] |= PORT_PCR_MUX(3);
	
	PORTB->PCR[PTB1_Pin] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[PTB1_Pin] |= PORT_PCR_MUX(3);	
	
	// Enable Clock Gating for Timer1
	SIM->SCGC6 |= SIM_SCGC6_TPM1_MASK;
	
	// Select clock for TPM module
	SIM->SOPT2 &= ~SIM_SOPT2_TPMSRC_MASK;
	SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1);
	
	// Set modulo value 20971520 / 128 = 163840 / 3276 = 50 Hz
	// TPM1->MOD = 3276;
	
	// Set modulo value 48000000 / 128 = 375000 / 7500 = 50 Hz
	TPM1->MOD = 7500;
	
	// Edge-Aligned PWM
	// Update SnC register: CMOD = 01, PS = 111 (128)
	TPM1->SC &= ~((TPM_SC_CMOD_MASK) | (TPM_SC_PS_MASK));
	TPM1->SC |= (TPM_SC_CMOD(1) | TPM_SC_PS(7));
	TPM1->SC &= ~(TPM_SC_CPWMS_MASK);
	
	// Enable PWM on TPM1 Channel 0 -> PTB0
	TPM1_C0SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM1_C0SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
	
	// Enable PWM on TPM1 Channel 1 -> PTB1
	TPM1_C1SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
	TPM1_C1SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
}

/* Initialize UART2 */
void initUART2 (uint32_t baud_rate) {
	uint32_t divisor, bus_clock;
	
	// Enable clock to UART2 and PORTE
	SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
	SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK;
	
	// Connect UART pins for PTE22, PTE23
	PORTE->PCR[UART_TX_PORTE22] &= ~PORT_PCR_MUX_MASK;
	PORTE->PCR[UART_TX_PORTE22] |= PORT_PCR_MUX(4);
	
	PORTE->PCR[UART_RX_PORTE23] &= ~PORT_PCR_MUX_MASK;
	PORTE->PCR[UART_RX_PORTE23] |= PORT_PCR_MUX(4);	
	
	// Ensure Tx and Rx are disabled before configuration
	UART2->C2 &= ~((UART_C2_TE_MASK) | (UART_C2_RE_MASK));
	
	// Set Baud Rate to the desired value
	bus_clock = (DEFAULT_SYSTEM_CLOCK) / 2;
	divisor = bus_clock / (baud_rate * 16);
	UART2->BDH = UART_BDH_SBR(divisor >> 8);
	UART2->BDL = UART_BDL_SBR(divisor);
	
	// No parity, 8-bits
	UART2->C1 = 0;
	UART2->S2 = 0;
	UART2->C3 = 0;
	
	//NVIC_SetPriority(UART2_IRQn, UART2_INT_PRIO);
	//NVIC_ClearPendingIRQ(UART2_IRQn);
	//NVIC_EnableIRQ(UART2_IRQn);
	
	// Enable Tx and Rx
	UART2->C2 |= ((UART_C2_TE_MASK) | (UART_C2_RE_MASK));
}

/* UART Transmit Poll */
void UART2_Transmit_Poll(uint8_t data) {
	// Wait until transmit data register is full
	while (!(UART2->S1 & UART_S1_TDRE_MASK)); 
	UART2->D = data;
}	

/* UART2 Receive Poll */
uint8_t UART2_Receive_Poll(void) {
	// Wait until receive data register is full
	while (!(UART2->S1 & UART_S1_RDRF_MASK));
	return (UART2->D);
}

/* Control LED */
void ledControl(uint8_t LED, uint8_t status) {
	if (LED == RED_LED) {
		if (status == led_on) {
			PTB->PDOR &= ~MASK(RED_LED);
		} else if (status == led_off) {
			PTB->PDOR |= MASK(RED_LED);
		}
	} else if (LED == GREEN_LED) {
		if (status == led_on) {
			PTB->PDOR &= ~MASK(GREEN_LED);
		} else if (status == led_off) {
			PTB->PDOR |= MASK(GREEN_LED);
		}
	} else if (LED == BLUE_LED) {
		if (status == led_on) {
			PTD->PDOR &= ~MASK(BLUE_LED);
		} else if (status == led_off) {
			PTD->PDOR |= MASK(BLUE_LED);
		}
	}
}